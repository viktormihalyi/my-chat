{"version":3,"sources":["Proxy.ts","EventProducer.ts","TextInput.tsx","Login.tsx","TextInputAndButton.tsx","ConversationCard.tsx","LeftPane.tsx","MessageCard.tsx","RightPane.tsx","Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["proxy","ws","inbox","WebSocket","addEventListener","e","p","JSON","parse","data","type","alert","message","dispatch","cid","channelId","conversations","find","x","lastMessages","push","conversation","packet","this","send","stringify","listeners","listener","obj","splice","findIndex","args","filter","call","Error","TextInput","state","value","props","focus","attrs","autofocus","autoFocus","onEnter","onKeyDown","keyCode","className","onChange","setState","target","onBlur","onFocus","placeholder","Component","Login","email","password","displayName","register","displayNameTextInput","React","createRef","src","width","key","toLowerCase","current","onClick","ref","href","preventDefault","sendPacket","staySignedIn","TextInputAndButton","textInput","buttonContent","ConversationCard","lastMessage","length","selected","onSelect","name","Date","timeStamp","toLocaleDateString","content","m","forceUpdate","removeAllEventListener","LeftPane","user","tag","text","sendContactRequest","map","selectedConversation","firstMessage","c","MessageCard","own","toLocaleTimeString","PureComponent","RightPane","referenceTo","contentType","onBack","id","senderId","onSend","Main","undefined","App","showLogin","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","fetch","headers","response","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.897c2a3b.chunk.js","sourcesContent":["import { OutgoingPacket, InboxDto, IncomingPacket, MessageDto } from \"./Chat\";\nimport { EventProducer } from \"./EventProducer\";\n\ninterface ProxyEventMap {\n    \"login\": () => void;\n    \"message\": (channelId: string, message: MessageDto) => void;\n    \"conversation\": (channelId: string) => void;\n}\n\nclass Proxy extends EventProducer<ProxyEventMap>\n{\n    private ws: WebSocket;\n    inbox: InboxDto | null = null;\n\n    constructor() {\n        super();\n        this.ws = new WebSocket(\"wss://raja.aut.bme.hu/chat/\");\n        this.ws.addEventListener(\"open\", () => {\n        });\n        this.ws.addEventListener(\"message\", e => {\n            let p = JSON.parse(e.data) as IncomingPacket;\n            switch (p.type) {\n                case \"error\":\n                    alert(p.message);\n                    break;\n                case \"login\":\n                    this.inbox = p.inbox;\n                    this.dispatch(\"login\");\n                    break;\n                case \"message\":\n                    let cid = p.channelId;\n                    this.inbox!.conversations.find(x => x.channelId === cid)?.lastMessages.push(p.message);\n                    this.dispatch(\"message\", cid, p.message)\n                    break;\n                case \"conversationAdded\":\n                    this.inbox!.conversations.push(p.conversation);\n                    this.dispatch(\"conversation\", p.conversation.channelId);\n                    break;\n            }\n        });\n    }\n\n    sendPacket(packet: OutgoingPacket) {\n        this.ws.send(JSON.stringify(packet));\n    }\n}\n\nexport var proxy = new Proxy();","export class EventProducer<M>\n{\n    private listeners: { type: keyof M, listener, obj?: Object }[] = [];\n\n    addEventListener<K extends keyof M>(type: K, listener: M[K], obj?: Object) {\n        this.listeners.push({ type, listener, obj });\n    }\n\n    removeEventListener<K extends keyof M>(type: K, listener) {\n        this.listeners.splice(this.listeners.findIndex(x => x.type === type && x.listener === listener), 1);\n    }\n\n    protected dispatch<K extends keyof M>(type: K, ...args) {\n        for (let listener of this.listeners.filter(x => x.type === type))\n            listener.listener.call(listener.obj, ...args);\n    }\n\n    removeAllEventListener(obj: Object) {\n        if (!obj) {\n            throw new Error(\"Must specify object\");\n        }\n        this.listeners = this.listeners.filter(x => x.obj !== obj);\n    }\n}","import React from \"react\";\nimport { Component } from \"react\";\n\nimport { TextInputOptions } from \"./Chat\";\nimport \"./TextInput.css\";\n\nexport class TextInput extends Component<TextInputOptions> {\n\n    state = { value: this.props.value, focus: false };\n\n    render() {\n        let attrs = {} as any;\n        if (this.props.autofocus)\n            attrs.autoFocus = true;\n        if (this.props.onEnter)\n            attrs.onKeyDown = e => {\n                if (e.keyCode === 13)\n                    this.props.onEnter!();\n            };\n\n        return (\n            <div className=\"text-input\">\n                <input type={this.props.type ?? \"text\"} value={this.state.value}\n                    onChange={e => {\n                        this.setState({ value: e.target.value });\n                        this.props.onChange?.(e.target.value);\n                    }}\n                    onBlur={() => this.setState({ focus: false })}\n                    onFocus={() => this.setState({ focus: true })} {...attrs} />\n                <div className=\"focus-indicator\"></div>\n                <label className={this.state.value || this.state.focus ? \"subsided\" : \"\"}>\n                    {this.props.placeholder}\n                </label>\n            </div>);\n    }\n}","import React, { Component } from 'react';\n\nimport { proxy } from './Proxy';\nimport { TextInput } from './TextInput';\n\nexport class Login extends Component {\n    state = { email: \"\", password: \"\", displayName: \"\", register: false };\n    displayNameTextInput = React.createRef<TextInput>();\n\n    render() {\n        return (\n            <div className=\"login\">\n                <img src=\"logo512.png\" width=\"256\" />\n\n                <TextInput\n                    type=\"email\"\n                    placeholder=\"Email (someone@example.com)\"\n                    value={this.state.email}\n                    key=\"email\"\n                    onChange={e => {\n                        if (e.toLowerCase() === \"lm9twd\") {\n                            const overriddenDisplayName = \"Viktor\";\n                            this.setState({ displayName: overriddenDisplayName });\n                            this.displayNameTextInput.current?.setState({ value: overriddenDisplayName });\n                        }\n                        this.setState({ email: e })\n                    }}\n                    onEnter={() => this.onClick()}\n                />\n\n                <TextInput\n                    type=\"password\"\n                    placeholder=\"Password\"\n                    value={this.state.password}\n                    key=\"password\"\n                    onChange={e => this.setState({ password: e })}\n                    onEnter={() => this.onClick()}\n                />\n\n                {this.state.register &&\n                    <TextInput\n                        type=\"text\"\n                        ref={this.displayNameTextInput}\n                        placeholder=\"Display Name (Agent Smith)\"\n                        value={this.state.displayName}\n                        key=\"displayName\"\n                        onChange={e => { this.setState({ displayName: e }); }}\n                        onEnter={() => this.onClick()}\n                    />\n                }\n\n                <button type=\"button\" onClick={() => this.onClick()}>\n                    {this.state.register ? \"Register\" : \"Login\"}\n                </button>\n\n                <a href=\"https://www.google.hu/search?q=privacy\">Privacy Policy</a>\n                <p>{this.state.register ? \"Switch back to \" : \"Have no account yet? Go and \"}\n                    <a href=\"\" onClick={e => {\n                        e.preventDefault();\n                        this.setState(state => ({ register: !this.state.register })); // pass a function instead of object\n                    }}>\n                        {this.state.register ? \"Login\" : \"Register\"}\n                    </a>\n                </p>\n            </div>);\n    }\n\n    onClick() {\n        if (this.state.register) {\n            proxy.sendPacket({\n                type: \"register\", email: this.state.email, password: this.state.password,\n                displayName: this.state.displayName, staySignedIn: false\n            });\n        } else {\n            proxy.sendPacket({\n                type: \"login\", email: this.state.email, password: this.state.password,\n                staySignedIn: false\n            });\n        }\n    }\n}   ","import React, { Component } from \"react\";\n\nimport { TextInput } from \"./TextInput\";\nimport { TextInputAndButtonOptions } from \"./Chat\";\n\nexport class TextInputAndButton extends Component<TextInputAndButtonOptions> {\n\n    textInput = React.createRef<TextInput>();\n\n    onClick() {\n        if (this.props.onClick?.(this.textInput.current?.state.value ?? \"\"))\n            this.textInput.current?.setState({ value: \"\" });\n    }\n\n    render() {\n        return (\n            <div className=\"text-input-and-button\">\n                <TextInput {...this.props} ref={this.textInput} onEnter={() => this.onClick()} />\n                <button type=\"button\" onClick={() => this.onClick()}>\n                    {this.props.buttonContent}\n                </button>\n            </div>\n        );\n    }\n}","import React from \"react\";\nimport { Component } from \"react\";\n\nimport { ConversationDto } from \"./Chat\";\nimport { proxy } from \"./Proxy\";\n\n\nexport class ConversationCard extends Component<{\n    conversation: ConversationDto,\n    selected: boolean,\n    onSelect: () => void\n}>\n{\n\n    render() {\n        let lastMessage = this.props.conversation.lastMessages.length > 0 ?\n            this.props.conversation.lastMessages[this.props.conversation.lastMessages.length - 1] : null;\n        return (\n            <div className={\"conversation-card\" + (this.props.selected ? \" selected\" : \"\")}\n                onClick={() => this.props.onSelect()}>\n                <div className=\"row\">\n                    <span className=\"channel-name\">{this.props.conversation.name}</span>\n                    <span className=\"time\">\n                        {lastMessage && new Date(lastMessage.timeStamp).toLocaleDateString()}\n                    </span>\n                </div>\n                <span className=\"last-message\">{lastMessage?.content}</span>\n            </div>\n        );\n    }\n\n    componentDidMount() {\n        proxy.addEventListener(\"message\", (cid, m) => {\n            if (cid === this.props.conversation.channelId)\n                this.forceUpdate();\n        }, this);\n    }\n\n    componentWillUnmount() {\n        proxy.removeAllEventListener(this);\n    }\n}","import React, { Component } from \"react\";\n\nimport { InboxDto, ConversationDto } from \"./Chat\";\nimport { TextInputAndButton } from \"./TextInputAndButton\";\nimport { proxy } from \"./Proxy\";\nimport { ConversationCard } from \"./ConversationCard\";\n\nexport class LeftPane extends Component<{\n    inbox: InboxDto, selectedConversation: ConversationDto | undefined,\n    onSelect: (c: ConversationDto) => void\n}>\n{\n    render() {\n        return (\n            <div className=\"left-pane\">\n                <p className=\"my-tag\">My tag: {this.props.inbox.user.tag}</p>\n                <TextInputAndButton type=\"text\" placeholder=\"Add user by Tag (Name#123)\"\n                    buttonContent=\"Inv\"\n                    onClick={text => this.sendContactRequest(text)} />\n                <div className=\"conversations\">\n                    {this.props.inbox.conversations.map(x =>\n                        <ConversationCard\n                            key={x.channelId}\n                            conversation={x}\n                            selected={x === this.props.selectedConversation}\n                            onSelect={() => this.props.onSelect(x)} />)}\n                </div>\n            </div>\n        );\n    }\n\n    sendContactRequest(email: string) {\n        proxy.sendPacket({ type: \"contactRequest\", email, firstMessage: \"O: Hello\" });\n        return true;\n    }\n\n    componentDidMount() {\n        proxy.addEventListener(\"conversation\", c => this.forceUpdate(), this);\n    }\n\n    componentWillUnmount() {\n        proxy.removeAllEventListener(this);\n    }\n}","import React, { PureComponent } from \"react\";\n\nimport { MessageDto } from \"./Chat\";\n\nexport class MessageCard extends PureComponent<{ message: MessageDto, own: boolean }>\n{\n    render() {\n        return (\n            <div className={\"message-card\" + (this.props.own ? \" own\" : \"\")}>\n                <div className=\"bubble\">\n                    <span className=\"text\">{this.props.message.content}</span>\n                    <span className=\"time\">\n                        {new Date(this.props.message.timeStamp).toLocaleTimeString()}\n                    </span>\n                </div>\n            </div>\n        );\n    }\n}","import React, { Component } from \"react\";\n\nimport { ConversationDto } from \"./Chat\";\nimport { MessageCard } from \"./MessageCard\";\nimport { proxy } from \"./Proxy\";\nimport { TextInputAndButton } from \"./TextInputAndButton\";\n\nexport class RightPane extends Component<{\n    conversation?: ConversationDto, onBack: () => void\n}> {\n\n    componentDidMount() {\n        proxy.addEventListener(\"message\", (cid, m) => {\n            if (cid === this.props.conversation?.channelId)\n                this.forceUpdate();\n        }, this);\n    }\n\n    componentWillUnmount() {\n        proxy.removeAllEventListener(this);\n    }\n\n    onSend(text: string) {\n        proxy.sendPacket({\n            type: \"message\",\n            channelId: this.props.conversation!.channelId,\n            referenceTo: 0,\n            contentType: 0,\n            content: \"L: \" + text\n        });\n        return true;\n    }\n\n    render() {\n        return (\n            <div className=\"right-pane column\">\n                {this.props.conversation &&\n                    <>\n                        <div className=\"conversation-header row\">\n                            <button type=\"button\" className=\"only-narrow\"\n                                onClick={() => this.props.onBack()}>Back</button>\n                            <p>{this.props.conversation?.name}</p>\n                        </div>\n                        <div className=\"messages\">\n                            {this.props.conversation?.lastMessages.map(x =>\n                                <MessageCard key={x.id} message={x}\n                                    own={x.senderId === proxy.inbox?.user.id} />)}\n                        </div>\n                        <div className=\"send-message row\">\n                            <TextInputAndButton type=\"text\" placeholder=\"Type something awesome here...\"\n                                buttonContent=\"Send\" onClick={x => this.onSend(x)} />\n                        </div>\n                    </>\n                }\n            </div>\n        );\n    }\n}","import React from \"react\";\nimport { Component } from \"react\";\n\nimport { ConversationDto } from \"./Chat\";\nimport { proxy } from \"./Proxy\";\nimport { LeftPane } from \"./LeftPane\";\nimport { RightPane } from \"./RightPane\";\n\nexport class Main extends Component {\n\n    state = { selectedConversation: undefined as (ConversationDto | undefined) };\n\n    render() {\n        let className = \"main row \" + (this.state.selectedConversation ? \"right\" : \"left\");\n        return (\n            <div className={className}>\n                <LeftPane\n                    inbox={proxy.inbox!}\n                    selectedConversation={this.state.selectedConversation}\n                    onSelect={c => this.setState({ selectedConversation: c })} />\n                <RightPane conversation={this.state.selectedConversation}\n                    onBack={() => this.setState({ selectedConversation: undefined })} />\n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\nimport { Login } from './Login'\nimport { Main } from './Main';\nimport { proxy } from './Proxy';\n\nexport default class App extends Component {\n    state = { showLogin: true };\n\n    componentDidMount() {\n        proxy.addEventListener(\"login\", () => this.setState({ showLogin: false }));\n    }\n\n    render() {\n        return (\n            <div className=\"app\">\n                {this.state.showLogin ? <Login /> : <Main />}\n            </div>\n        );\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            process.env.PUBLIC_URL,\n            window.location.href\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' }\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}